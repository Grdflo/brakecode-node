#!/usr/bin/env node

/**
 * MIT License
 *
 *    Copyright (c) 2020 June07
 *
 *    Permission is hereby granted, free of charge, to any person obtaining a copy
 *    of this software and associated documentation files (the "Software"), to deal
 *    in the Software without restriction, including without limitation the rights
 *    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *    copies of the Software, and to permit persons to whom the Software is
 *    furnished to do so, subject to the following conditions:
 *
 *    The above copyright notice and this permission notice shall be included in all
 *    copies or substantial portions of the Software.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *    SOFTWARE.
*/

const debug = require('debug')('brakecode:SSHKeyManager.js'),
    fs = require('fs'),
    { exec } = require('child_process'),
    { join } = require('path'),
    { homedir } = require('os'),
    ID_RSA = join(homedir(), '.ssh/', 'brakecode.id_rsa'),
    ID_RSA_CERT = join(homedir(), '.ssh/', 'brakecode.id_rsa-cert.pub'),
    ID_RSA_COMMENT = 'Generated by Brakecode Agent';

class SSHKeyManager {
    constructor(Agent) {
        let self = this;
        self.Agent = Agent;

        new Promise(resolve => {
            // Check for the keys
            if (ID_RSA !== undefined) {
                // Default key is set.
                self.readPubKeyFile(ID_RSA + '.pub')
                .then((key) => resolve(self.key = key));
            } else if (process.env.ID_RSA !== undefined) {
                // User set key in config file.
                self.readPubKeyFile(process.env.ID_RSA + '.pub')
                .then((key) => resolve(self.key = key));
            } else {
                // Generate if not found.
                self.generateKeyFile()
                .then((key) => resolve(self.key = key));
            }
        })
        .then(() => {
            self.generateKeyCertificate();
        })
    }
    readPubKeyFile(keyfile) {
        let self = this;
        return new Promise((resolve) => {
            fs.readFile(keyfile, { encoding: 'utf8'}, (err, data) => {
                if (err) {
                    self.generateKeyFile()
                    .then((keydata) => {
                        resolve(keydata);
                    });
                }
               resolve(data);
            });
        });
    }
    generateKeyFile() {
        return new Promise((resolve, reject) => {
            let sshkeygen = exec('ssh-keygen -t rsa-sha2-512 -b 4096 -C "' + ID_RSA_COMMENT + '" -N "" -f ' + ID_RSA, (error, stdout, stderr) => {
                if (error) reject(error);
                return stdout;
            });
        })
        .then((stdout) => {
            return self.readKeyFile(ID_RSA);
        })
        .then((keydata) => {
            resolve(keydata);
        });
    }
    generateKeyCertificate() {
        debug('Generating Key Certificate...');
        let self = this;
        if (self.Agent.controlSocket.io) self.Agent.controlSocket.io.emit('generateSSH_KeyCert', { key: self.key, principle: self.Agent.apikeyHashedUUID })
        .on('SSH_KeyCert', publicKey => {
            fs.writeFileSync(ID_RSA_CERT, publicKey, { mode: '0600' });
            fs.chmodSync(ID_RSA_CERT, '0600'); // The mode option above is not working?!
        });
    }
}

module.exports = SSHKeyManager;